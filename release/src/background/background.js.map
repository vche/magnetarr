{"mappings":"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","sources":["<anon>","src/background/background.js","src/lib/provider.js","src/lib/server.js","node_modules/@parcel/node-resolver-core/lib/_empty.js"],"sourcesContent":["(() => {\n\"use strict\";\n\n\nconst $e1c11fc7383b8165$export$55be15701b71cf02 = {\n    Unknown: null,\n    Movie: \"movie\",\n    Serie: \"serie\"\n};\nclass $e1c11fc7383b8165$export$6d08773d2e66f8f2 {\n    constructor(itemid = null, itemtype = $e1c11fc7383b8165$export$55be15701b71cf02.Unknown, itemslug = null, exists = null, properties = {}){\n        this.provider = null;\n        this.server = null;\n        this.itemid = itemid;\n        this.itemtype = itemtype;\n        this.itemslug = itemslug;\n        this.properties = properties;\n        this.exists = exists;\n    }\n    getPosterUrl() {\n        if (this.properties && this.properties.images) for(var i = 0; i < this.properties.images.length; i++){\n            if (this.properties.images[i].coverType === \"poster\") return this.properties.images[i].remoteUrl;\n        }\n    }\n}\nclass $e1c11fc7383b8165$export$d59771a2e9612de9 {\n    constructor(name, default_port = 0){\n        this.name = name;\n        this.default_port = default_port;\n        this.setConfig();\n    }\n    // Configure server from config dictionary\n    setConfig(server_settings = null) {\n        // Create empty config if neede\n        if (server_settings == null) server_settings = {\n            configuration: {\n                auth: {}\n            },\n            preferences: {}\n        };\n        else {\n            if (server_settings.configuration === undefined) server_settings[\"configuration\"] = {\n                auth: {}\n            };\n            else if (server_settings.configuration.auth === undefined) server_settings.configuration[\"auth\"] = {};\n            if (server_settings.preferences === undefined) server_settings[\"preferences\"] = {};\n        }\n        // Set properties or use default\n        this.enabled = server_settings.enabled || false;\n        // Set server configuration\n        this.host = server_settings.configuration.host || \"http://127.0.0.1\";\n        this.port = server_settings.configuration.port || this.default_port;\n        this.apikey = server_settings.configuration.apikey || \"\";\n        this.user = server_settings.configuration.auth.user || \"\";\n        this.password = server_settings.configuration.auth.password || \"\";\n        // Set server preferences\n        this.monitored = server_settings.preferences.monitored || true;\n        this.profileid = server_settings.preferences.qualityProfileId || \"\";\n        this.auxinfo = server_settings.preferences.auxInfo || \"\";\n        this.folder = server_settings.preferences.folder || \"\";\n        this.profiles = [];\n        this.folders = [];\n    }\n    // Get the server config dictionary\n    getConfig() {\n        return {\n            \"enabled\": this.enabled,\n            \"configuration\": {\n                \"host\": this.host,\n                \"port\": this.port,\n                \"apikey\": this.apikey,\n                \"auth\": {\n                    \"user\": this.user,\n                    \"pass\": this.password\n                }\n            },\n            \"preferences\": {\n                \"monitored\": this.monitored,\n                \"qualityProfileId\": this.profileid,\n                \"auxInfo\": this.auxinfo,\n                \"folder\": this.folder\n            }\n        };\n    }\n    // Load the config from the extension storage\n    async loadConfig(loadProfiles = false, loadFolders = false) {\n        const wanted = {};\n        wanted[this.name] = this.getConfig();\n        const items = await chrome.storage.sync.get(wanted);\n        this.setConfig(items[this.name]);\n        console.debug(`Loaded ${this.name} config: ${JSON.stringify(this.getConfig())}`);\n        if (loadProfiles) this.profiles = await this.getProfiles();\n        if (loadFolders) this.folders = await this.getFolders();\n        return items;\n    }\n    // Save config to the extension storage\n    async saveConfig() {\n        const wanted = {};\n        wanted[this.name] = this.getConfig();\n        console.debug(`Saved ${this.name} config: ${JSON.stringify(this.getConfig())}`);\n        await chrome.storage.sync.set(wanted);\n    }\n    // Build the server url\n    getUrl() {\n        var regex = new RegExp(\"https{0,1}://\");\n        if (!regex.exec(this.host)) this.host = \"http://\" + this.host;\n        if (this.port === \"\") return this.host;\n        else return this.host + \":\" + this.port;\n    }\n    async get(endpoint, data = null, params = null) {\n        try {\n            // Build URL\n            var url = this.getUrl() + endpoint;\n            if (params) url = url + \"?\" + params;\n            // Build headers\n            const headers = {\n                \"X-Api-Key\": this.apikey\n            };\n            if (this.user && this.password) headers[\"Authorization\"] = \"Basic \" + btoa(this.user + \":\" + this.password);\n            // Build data\n            var body = data;\n            if (data != null && typeof data !== \"string\") body = JSON.stringify(data);\n            const res = await fetch(url, {\n                method: \"get\",\n                body: body,\n                headers: headers\n            });\n            if (res.status >= 400) throw new Error(`${res.status} (${res.statusText})`);\n            data = await res.json();\n            console.debug(`Request to ${url}: ${res.status} ${JSON.stringify(data)}`);\n            return data;\n        } catch (error) {\n            console.log(`Error querying endpoint ${url}: ${error}`);\n            throw error;\n        }\n    }\n    // post()\n    getLogo(size = \"48\") {\n        return `/img/${this.name}/${this.name}-${size}.png`;\n    }\n    // Check if an item exists based on its id and/or slyf, returns its slug or null\n    async itemExists(item) {\n        const response = await this.getItemList();\n        for(var i = 0; i < response.length; i++){\n            const elt = response[i];\n            if (item.itemid && this.checkItemId(item.itemid, elt) || item.itemslug && item.itemslug === elt.titleSlug) return elt.titleSlug;\n        }\n        return null;\n    }\n    // Look for an item based on info provided (id and/or slug), fetch and fill other info (exists, properties)\n    async getItemInfo(item) {\n        // Query for both existence and item info\n        const [slug, results] = await Promise.all([\n            this.itemExists(item),\n            this.lookupItem(item)\n        ]);\n        // Consolidate results\n        item.itemslug = slug;\n        item.exists = item.itemslug ? true : false;\n        if (results.length == 0) item.properties = null;\n        if (results.length > 0) {\n            item.properties = results[0];\n            if (results.length > 1) console.log(\"Warning, several results found for this item\");\n        }\n        return item;\n    }\n    async getProfiles() {\n        const result = await this.get(this.getProfileUrlPath());\n        // for (let i = 0; i < result.length; i++) { console.log(\"prof: \" + result[i].id + \" // \" + result[i].name); }\n        return result;\n    }\n    async getFolders() {\n        const result = await this.get(this.getFolderUrlPath());\n        const folders = [];\n        for(let i = 0; i < result.length; i++)// console.log(\"prof: \" + result[i].id + \" // \" + result[i].path);\n        folders.push({\n            \"name\": result[i].path,\n            \"id\": result[i].path\n        });\n        return folders;\n    }\n    async getItemList() {\n        return [];\n    }\n    async lookupItem(item) {\n        return {};\n    }\n    getAuxInfoValues() {\n        return [];\n    }\n    getItemUrl(item) {\n        return this.getUrl() + \"/\" + item.itemslug;\n    }\n    checkItemId(itemid, element) {\n        return False;\n    }\n    getProfileUrlPath() {\n        return \"/profiles\";\n    }\n    getFolderUrlPath() {\n        return \"/folders\";\n    }\n}\nclass $e1c11fc7383b8165$export$245a76c709f13a9f extends $e1c11fc7383b8165$export$d59771a2e9612de9 {\n    constructor(){\n        super(\"radarr\", 7878);\n    }\n    async getItemList() {\n        return await this.get(\"/api/v3/movie\");\n    }\n    async lookupItem(item) {\n        return await this.get(\"/api/v3/movie/lookup\", null, \"term=imdb%3A%20\" + item.itemid);\n    }\n    checkItemId(itemid, element) {\n        return itemid === element.imdbId;\n    }\n    getItemUrl(item) {\n        return this.getUrl() + \"/movies/\" + item.itemslug;\n    }\n    getProfileUrlPath() {\n        return \"/api/v3/qualityProfile\";\n    }\n    getFolderUrlPath() {\n        return \"/api/v3/rootfolder\";\n    }\n    getAuxInfoValues() {\n        return [\n            {\n                name: \"Announced\",\n                id: \"announced\"\n            },\n            {\n                name: \"In Cinemas\",\n                id: \"inCinemas\"\n            },\n            {\n                name: \"Physical/Web\",\n                id: \"released\"\n            },\n            {\n                name: \"Pre DB/Web\",\n                id: \"preDB\"\n            }\n        ];\n    }\n}\nclass $e1c11fc7383b8165$export$8a63d9191f88983e extends $e1c11fc7383b8165$export$d59771a2e9612de9 {\n    constructor(){\n        super(\"sonarr\", 8989);\n    }\n    async getItemList() {\n        return await this.get(\"/api/v3/series\");\n    }\n    async lookupItem(item) {\n        return await this.get(\"/api/v3/series/lookup\", null, \"term=tvdb%3A%20\" + item.itemid);\n    }\n    checkItemId(itemid, element) {\n        return element.tvdbId && itemid === element.tvdbId.toString();\n    }\n    getItemUrl(item) {\n        return this.getUrl() + \"/series/\" + item.itemslug;\n    }\n    getProfileUrlPath() {\n        return \"/api/v3/qualityProfile\";\n    }\n    getFolderUrlPath() {\n        return \"/api/v3/rootfolder\";\n    }\n    getAuxInfoValues() {\n        return [\n            {\n                name: \"Standard\",\n                id: \"standard\"\n            },\n            {\n                name: \"Daily\",\n                id: \"daily\"\n            },\n            {\n                name: \"Anime\",\n                id: \"anime\"\n            }\n        ];\n    }\n}\n// addItem()\n// tbd\n// radarr.addMovie(\n//     media.movie.text[0],\n//     $('#lstProfile').val(),\n//     $('#monitored').prop('checked'),\n//     $('#lstMinAvail').val(),\n//     false,\n//     $('#lstFolderPath').val() ? $('#lstFolderPath').val() : addPath\n// );\n// sonarr.addSeries(\n//     media.series.text[0],\n//     $('#lstProfile').val(),\n//     $('#lstSeriesType').val(),\n//     $('#monitored').prop('checked'),\n//     false,\n//     $('#lstFolderPath').val() ? $('#lstFolderPath').val() : addPath,\n//     $('#lstLanguage').val()\n// );\n// \n// addMovie(movie, qualityId, monitored, minAvail, addSearch, folderPath) {\n//     pulsarr.loading();\n//     var newMovie = {\n//         \"title\": movie.title,\n//         \"year\": movie.year,\n//         \"qualityProfileId\": parseInt(qualityId),\n//         \"titleSlug\": movie.titleSlug,\n//         \"images\": movie.images,\n//         \"tmdbid\": movie.tmdbId,\n//         \"rootFolderPath\": folderPath,\n//         \"monitored\": monitored,\n//         \"minimumAvailability\": minAvail,\n//         \"addOptions\": {\n//             \"searchForMovie\": addSearch\n//         }\n//     };\n//     console.log(\"Add movie\");\n//     console.log(newMovie);\n//     this.post(\"/api/v3/movie\", newMovie).then(function(response) {\n//         radarr.updatePreferences(monitored, qualityId, minAvail, folderPath);\n//         pulsarr.info(\"Movie added to Radarr!\");\n//         setTimeout(function() {\n//             window.close();\n//         }, 1500);\n//     }).catch(function(error) {\n//         console.log(\"Error: \" + error)\n//         pulsarr.info(error);\n//     });\n// }\n// addSeries(series, qualityId, seriesType, monitored, addSearch, folderPath, languageId) {\n//     pulsarr.loading();\n//     var newSeries = {\n//         \"title\": series.title,\n//         \"year\": series.year,\n//         \"qualityProfileId\": parseInt(qualityId),\n//         \"languageProfileId\": languageId,\n//         \"seriesType\": seriesType,\n//         \"titleSlug\": series.titleSlug,\n//         \"images\": series.images,\n//         \"tvdbId\": series.tvdbId,\n//         \"rootFolderPath\": folderPath,\n//         \"monitored\": monitored,\n//         \"addOptions\": {\n//             \"ignoreEpisodesWithFiles\": false,\n//             \"ignoreEpisodesWithoutFiles\": false,\n//             \"searchForMissingEpisodes\": addSearch\n//         }\n//     };\n//     console.log(\"Adding serie\");\n//     console.log(newSeries);\n//     this.post(\"/api/v3/series\", newSeries).then(function(response) {\n//         sonarr.updatePreferences(monitored, qualityId, seriesType, folderPath);\n//         pulsarr.info(\"Series added to Sonarr!\");\n//         setTimeout(function() {\n//             window.close();\n//         }, 1500);\n//     }).catch(function(error) {\n//         pulsarr.info(error);\n//     });\n// }\n// lookupItemByTitleYear(title, year)\n// async lookupMovieByTitleYear(title, year) {\n// \tvar self = this;\n// \tvar searchString = title + \" \" + year;\n// \tsearchString = encodeURI(searchString);\n// \t// antipattern: resolve acts as reject and vice versa\n// \treturn new Promise(async function(resolve, reject) {\n// \t\tif (title === \"\") {\n// \t\t\tresolve();\n// \t\t} else {\n// \t\t\tvar lookup = await self.get(\"/api/v3/movie/lookup\", \"term=\" + searchString)\n// \t\t\tvar existingSlug = await self.isExistingMovieByTitleSlug(lookup.text[0].titleSlug)\n// \t\t\tif (lookup) {\n// \t\t\t\treject({\"type\": \"movie\", \"movie\": lookup, \"existingSlug\": existingSlug});\n// \t\t\t} else {\n// \t\t\t\tresolve(error);\n// \t\t\t}\n// \t\t};\n// \t});\n// }\n// async lookupSeriesByTitleYear(title, year) {\n// \tvar self = this;\n// \tvar searchString = title + \" \" + year;\n// \tsearchString = encodeURI(searchString);\n// \t// antipattern: resolve acts as reject and vice versa\n// \treturn new Promise(async function(resolve, reject) {\n// \t\tif (title === \"\") {\n// \t\t\tresolve();\n// \t\t} else {\n// \t\t\tvar lookup = await self.get(\"/api/v3/series/lookup\", \"term=\" + searchString)\n// \t\t\tvar existingSlug = await self.isExistingSeriesByTitleSlug(lookup.text[0].titleSlug)\n// \t\t\tif (lookup) {\n// \t\t\t\treject({\"type\": \"series\", \"series\": lookup, \"existingSlug\": existingSlug});\n// \t\t\t} else {\n// \t\t\t\tresolve(error);\n// \t\t\t}\n// \t\t};\n// \t});\n// }\nconst $e1c11fc7383b8165$var$ServerList = {};\n$e1c11fc7383b8165$var$ServerList[$e1c11fc7383b8165$export$55be15701b71cf02.Movie] = new $e1c11fc7383b8165$export$245a76c709f13a9f();\n$e1c11fc7383b8165$var$ServerList[$e1c11fc7383b8165$export$55be15701b71cf02.Serie] = new $e1c11fc7383b8165$export$8a63d9191f88983e();\nfunction $e1c11fc7383b8165$export$ddaec4e6efa6a9f1(type) {\n    return $e1c11fc7383b8165$var$ServerList[type];\n}\n\n\nclass $d0175d9ba891ce1f$var$Provider {\n    static get name() {\n        return \"\";\n    }\n    constructor(name){\n        this.name = $d0175d9ba891ce1f$export$95ff3f2cef1aeda.name;\n    }\n    urlMatch(url) {\n        return false;\n    }\n    itemFromUrl(url) {\n        return {\n            itemid: 0,\n            itemtype: (0, $e1c11fc7383b8165$export$55be15701b71cf02).Unknown\n        };\n    }\n}\nclass $d0175d9ba891ce1f$export$95ff3f2cef1aeda extends $d0175d9ba891ce1f$var$Provider {\n    static get name() {\n        return \"Imdb\";\n    }\n    constructor(name){\n        super(name);\n        this.idRegex = new RegExp(\"/tt\\\\d{1,8}\");\n        this.xmlparser = new DOMParser();\n    }\n    _imdbIdFromUrl(url) {\n        const imdbid = this.idRegex.exec(url);\n        return imdbid ? imdbid[0].slice(1) : \"\";\n    }\n    urlMatch(url) {\n        return url.match(/\\/\\/www\\.imdb.com\\/.+\\/tt\\d{7,8}\\//) ? true : false;\n    }\n    async tvdbidFromImdbid(imdbid) {\n        const url = \"http://thetvdb.com/api/GetSeriesByRemoteID.php?imdbid=\" + imdbid;\n        const headers = {\n            \"Content-Type\": \"application/xml\"\n        };\n        try {\n            // Try to get the serie id from allocine\n            const res = await fetch(url, {\n                method: \"get\",\n                headers: headers\n            });\n            if (res.status >= 400) throw new Error(`${res.status} (${res.statusText})`);\n            const xmldata = await res.text();\n            console.debug(`Request to ${url}: ${res.status} ${xmldata}`);\n            // Extract the serie id from xml data if we got some\n            const xmldoc = this.xmlparser.parseFromString(xmldata, \"application/xml\");\n            const errorNode = xmldoc.querySelector(\"parsererror\");\n            if (errorNode) console.log(\"error while parsing response: \" + xmldata);\n            else {\n                const serieid = xmldoc.getElementsByTagName(\"seriesid\");\n                if (serieid.length > 0) return serieid[0].innerHTML;\n            }\n        } catch (error) {\n            console.log(`Error querying endpoint ${url}: ${error}`);\n        }\n        return null;\n    }\n    async itemFromUrl(url) {\n        const imdbid = this._imdbIdFromUrl(url);\n        if (!imdbid) return new (0, $e1c11fc7383b8165$export$6d08773d2e66f8f2)();\n        const tvdbid = await this.tvdbidFromImdbid(imdbid);\n        console.debug(\"imdb id \" + imdbid + \" // tvdb id \" + tvdbid);\n        // If we have a tvid, that's a serie. otherwise a movie\n        if (tvdbid) return new (0, $e1c11fc7383b8165$export$6d08773d2e66f8f2)(tvdbid, (0, $e1c11fc7383b8165$export$55be15701b71cf02).Serie);\n        else return new (0, $e1c11fc7383b8165$export$6d08773d2e66f8f2)(imdbid, (0, $e1c11fc7383b8165$export$55be15701b71cf02).Movie);\n    }\n}\nclass $d0175d9ba891ce1f$export$cc923ee7e8796969 extends $d0175d9ba891ce1f$var$Provider {\n    static get name() {\n        return \"Tvdb\";\n    }\n    urlMatch(url) {\n        return url.match(/.*thetvdb.com\\/.*id\\=\\d{1,7}/) ? true : false;\n    }\n}\nclass $d0175d9ba891ce1f$export$3e3dab1427dcef9e extends $d0175d9ba891ce1f$var$Provider {\n    static get name() {\n        return \"RottenTomatoes\";\n    }\n    urlMatch(url) {\n        return url.match(/.*rottentomatoes.com\\/(tv|m)\\//) ? true : false;\n    }\n}\nclass $d0175d9ba891ce1f$export$d17694f8fb28c7d extends $d0175d9ba891ce1f$var$Provider {\n    static get name() {\n        return \"TheMovieDb\";\n    }\n    urlMatch(url) {\n        return url.match(/.*themoviedb.org\\/(tv|movie)\\//) ? true : false;\n    }\n}\nclass $d0175d9ba891ce1f$export$40e8b8a63495e688 extends $d0175d9ba891ce1f$var$Provider {\n    static get name() {\n        return \"TraktTv\";\n    }\n    urlMatch(url) {\n        return url.match(/.*trakt.tv\\/(shows|movies)\\//) ? true : false;\n    }\n}\n// Build the list of available providers\nconst $d0175d9ba891ce1f$var$ProviderList = {};\n$d0175d9ba891ce1f$var$ProviderList[$d0175d9ba891ce1f$export$95ff3f2cef1aeda.name] = new $d0175d9ba891ce1f$export$95ff3f2cef1aeda();\nfunction $d0175d9ba891ce1f$export$1284f32c93cfe5ef(url) {\n    for (const [name, provider] of Object.entries($d0175d9ba891ce1f$var$ProviderList)){\n        if (provider.urlMatch(url)) return provider;\n    }\n    return null;\n}\n\n\n\"use strict\";\nfunction $b61950db06f93f98$var$handlePageAction(tabInfo) {\n    chrome.tabs.query({\n        active: true,\n        currentWindow: true\n    }, function(tabArray) {\n        if (tabArray[0] && (0, $d0175d9ba891ce1f$export$1284f32c93cfe5ef)(tabArray[0].url)) chrome.action.enable(tabInfo.tabId);\n        else chrome.action.disable(tabInfo.tabId);\n    });\n}\n// Register our page parser when a tab gets activated and when a page gets loaded\nchrome.tabs.onActivated.addListener($b61950db06f93f98$var$handlePageAction);\nchrome.webNavigation.onCommitted.addListener($b61950db06f93f98$var$handlePageAction);\n\n})();\n//# sourceMappingURL=background.js.map\n","\"use strict\";\nimport {getProviderFromUrl} from \"../lib/provider\";\n\nfunction handlePageAction(tabInfo) {\n  chrome.tabs.query({active:true,currentWindow:true},function(tabArray){\n    if ((tabArray[0])&&(getProviderFromUrl(tabArray[0].url))) {\n        chrome.action.enable(tabInfo.tabId);\n    } else {\n        chrome.action.disable(tabInfo.tabId);\n    }\n  });\n}\n\n// Register our page parser when a tab gets activated and when a page gets loaded\nchrome.tabs.onActivated.addListener(handlePageAction);\nchrome.webNavigation.onCommitted.addListener(handlePageAction);\n","import { Item, ItemTypes } from './server';\n\nclass Provider {\n    static get name() { return \"\"; }\n\n    constructor (name) {\n        this.name = Imdb.name;\n\t}\n    \n    urlMatch(url) { return false; }\n    itemFromUrl(url) { return {itemid: 0, itemtype: ItemTypes.Unknown}; }\n}\n\nexport class Imdb extends Provider {\n    static get name() { return \"Imdb\";}\n\n    constructor (name) {\n        super(name);\n        this.idRegex = new RegExp(\"\\/tt\\\\d{1,8}\");\n        this.xmlparser = new DOMParser();\n\t}\n\n    _imdbIdFromUrl(url) {\n        const imdbid = this.idRegex.exec(url);\n        return (imdbid) ? imdbid[0].slice(1) : \"\";\n    }\n\n    urlMatch(url) { return url.match(/\\/\\/www\\.imdb.com\\/.+\\/tt\\d{7,8}\\//)?true:false; }\n\n    async tvdbidFromImdbid(imdbid) {\n        const url = \"http://thetvdb.com/api/GetSeriesByRemoteID.php?imdbid=\" + imdbid;\n        const headers = {\"Content-Type\": \"application/xml\"};\n        try {\n            // Try to get the serie id from allocine\n            const res = await fetch(url, { method: \"get\", headers: headers });\n            if (res.status >= 400) throw new Error(`${res.status} (${res.statusText})`)\n            const xmldata = await res.text();\n            console.debug(`Request to ${url}: ${res.status} ${xmldata}`); \n\n            // Extract the serie id from xml data if we got some\n            const xmldoc = this.xmlparser.parseFromString(xmldata, \"application/xml\");\n            const errorNode = xmldoc.querySelector(\"parsererror\");\n            if (errorNode) {\n              console.log(\"error while parsing response: \" + xmldata);\n            } else {\n                const serieid = xmldoc.getElementsByTagName(\"seriesid\");\n                if (serieid.length > 0) {\n                    return serieid[0].innerHTML;\n                }\n            }\n        } catch (error) {\n            console.log(`Error querying endpoint ${url}: ${error}`);\n        }\n        return null;\n    }\n\n    async itemFromUrl(url) {\n        const imdbid = this._imdbIdFromUrl(url);\n        if (!imdbid) { return new Item() }\n\n        const tvdbid = await this.tvdbidFromImdbid(imdbid)\n        console.debug(\"imdb id \" + imdbid + \" // tvdb id \" + tvdbid);\n\n        // If we have a tvid, that's a serie. otherwise a movie\n        if (tvdbid) { return new Item(tvdbid, ItemTypes.Serie) }\n        else return new Item(imdbid, ItemTypes.Movie)\n    }\n\n        // async ImdbidFromTitle(title,ismovie) {\n\t// \tif (ismovie){\n\t// \t\tvar url = \"http://www.imdb.com/find?s=tt&ttype=ft&ref_=fn_ft&q=\" + title;\n\t// \t} else {\n\t// \t\tvar url = \"http://www.imdb.com/find?s=tt&&ttype=tv&ref_=fn_tv&q=\" + title;\n\t// \t}\n\t// \tlet result = await $.ajax({url: url, datatype: \"xml\"});\n\t// \tvar regex = new RegExp(\"\\/tt\\\\d{1,8}\");\n\t// \tlet imdbid = await regex.exec($(result).find(\".result_text\").find(\"a\").attr(\"href\"));\n\n\t// \treturn (imdbid) ? imdbid[0].slice(1) : \"\";\n\n\t// }\n        // try {\n        //     let imdbid = pulsarr.extractIMDBID(url);\n        //     let tvdbid = await pulsarr.TvdbidFromImdbid(imdbid);\n        //     console.log(\"Extracted imdb id \" + imdbid + \" tvdbid \" + tvdbid);\n    \n        //     Promise.all([radarr.lookupMovie(imdbid, tvdbid), sonarr.lookupSeries(tvdbid)]).then(function(error) {\n        //         if (pulsarrConfig.radarr.isEnabled && pulsarrConfig.sonarr.isEnabled) {\n        //             pulsarr.info(error);\n        //         } else if (pulsarrConfig.radarr.isEnabled && !pulsarrConfig.sonarr.isEnabled) {\n        //             pulsarr.init(blackhole);\n        //             $('#optLgConfig').removeClass(\"hidden\");\n        //             pulsarr.info(\"Unable to find movie. If this is a series, please configure a Sonarr server.\");\n        //         } else if (!pulsarrConfig.radarr.isEnabled && pulsarrConfig.sonarr.isEnabled) {\n        //             pulsarr.init(blackhole);\n        //             $('#optLgConfig').removeClass(\"hidden\");\n        //             pulsarr.info(\"Unable to find series. If this is a movie, please configure a Radarr server.\");\n        //         } else {\n        //             chrome.runtime.openOptionsPage();\n        //         }\n        //     }).catch(function(response) {\n        //         pulsarr.init(response);\n        //     });\n        // } catch (err) {\n        //     pulsarr.info(err);\n        // }\n\n    //     return true; \n    // }\n}\n\nexport class Tvdb extends Provider {\n    static get name() { return \"Tvdb\";}\n\n    urlMatch(url) { return url.match(/.*thetvdb.com\\/.*id\\=\\d{1,7}/)?true:false; }\n\n    // tvdbIdFromUrl(url) {}\n    // var regex = new RegExp(\"(&|\\\\?)(id|seriesid)=\\\\d{1,7}\");\n    // var tvdbid = regex.exec(url);\n    // return (tvdbid) ? tvdbid[0].split(\"=\")[1]:\"\";\n}\n\nexport class RottenTomatoes extends Provider {\n    static get name() { return \"RottenTomatoes\";}\n\n    urlMatch(url) { return url.match(/.*rottentomatoes.com\\/(tv|m)\\//)?true:false; }\n}\n\nexport class TheMovieDb extends Provider {\n    static get name() { return \"TheMovieDb\";}\n\n    urlMatch(url) { return url.match(/.*themoviedb.org\\/(tv|movie)\\//)?true:false; }\n}\n\nexport class TraktTv extends Provider {\n    static get name() { return \"TraktTv\";}\n\n    urlMatch(url) { return url.match(/.*trakt.tv\\/(shows|movies)\\//)?true:false; }\n}\n\n// Build the list of available providers\nconst ProviderList = {};\nProviderList[Imdb.name] = new Imdb();\n// ProviderList[Tvdb.name] = new Tvdb();\n// ProviderList[RottenTomatoes.name] = new RottenTomatoes();\n// ProviderList[TheMovieDb.name] = new TheMovieDb();\n// ProviderList[TraktTv.name] = new TraktTv();\n\n// Find a provider matching this url\nexport function getProviderFromUrl(url) {\n    for (const [name, provider] of Object.entries(ProviderList)) {\n        if (provider.urlMatch(url)) { return provider; }\n    }\n    return null;\n}\n","import { lookupService } from \"dns\";\n\nexport const ItemTypes = {\n    Unknown: null,\n\tMovie: \"movie\",\n\tSerie: \"serie\",\n}\n\nexport class Item {\n    constructor(itemid=null, itemtype=ItemTypes.Unknown, itemslug = null, exists = null, properties = {})\n    {\n        this.provider = null;\n        this.server = null;\n\n        this.itemid = itemid;\n        this.itemtype = itemtype;\n        this.itemslug = itemslug;\n        this.properties = properties;\n        this.exists = exists;\n    }\n\n    getPosterUrl() {\n        if (this.properties && this.properties.images) {\n            for (var i = 0; i < this.properties.images.length; i++) {\n                if (this.properties.images[i].coverType === \"poster\") {\n                    return this.properties.images[i].remoteUrl;\n                 }\n            }\n        }\n    }\n}\n\nexport class Server {\n\tconstructor (name, default_port=0) {\n\t\tthis.name = name;\n\t\tthis.default_port = default_port;\n        this.setConfig();\n\t}\n\n    // Configure server from config dictionary\n    setConfig(server_settings = null) {\n        // Create empty config if neede\n        if (server_settings == null) server_settings = {configuration: {auth: {}}, preferences: {}};\n        else {\n            if (server_settings.configuration === undefined) server_settings[\"configuration\"] = {auth: {}};\n            else if (server_settings.configuration.auth === undefined) server_settings.configuration[\"auth\"] = {};\n            if (server_settings.preferences === undefined) server_settings[\"preferences\"] = {};\n        }\n\n        // Set properties or use default\n        this.enabled = server_settings.enabled || false;\n\n        // Set server configuration\n        this.host = server_settings.configuration.host || \"http://127.0.0.1\";\n        this.port = server_settings.configuration.port || this.default_port;\n        this.apikey = server_settings.configuration.apikey || \"\" ;\n        this.user = server_settings.configuration.auth.user || \"\" ;\n        this.password = server_settings.configuration.auth.password || \"\" ;\n\n        // Set server preferences\n        this.monitored = server_settings.preferences.monitored || true ;\n        this.profileid = server_settings.preferences.qualityProfileId || \"\" ;\n        this.auxinfo = server_settings.preferences.auxInfo || \"\" ;\n        this.folder = server_settings.preferences.folder || \"\" ;\n        this.profiles = [];\n        this.folders = [];\n    }\n\n    // Get the server config dictionary\n    getConfig() {\n\t    return {\n\t\t    \"enabled\": this.enabled,\n            \"configuration\": {\n                \"host\": this.host,\n                \"port\": this.port,\n                \"apikey\": this.apikey,\n                \"auth\": {\n                    \"user\": this.user,\n                    \"pass\": this.password,\n                }\n            },\n\t\t    \"preferences\": {\n\t\t\t    \"monitored\": this.monitored,\n\t\t\t    \"qualityProfileId\": this.profileid,\n\t\t\t    \"auxInfo\": this.auxinfo, // min availability for movies, series type for series\n\t\t\t    \"folder\": this.folder,\n            },\n        }\n    }\n\n    // Load the config from the extension storage\n    async loadConfig(loadProfiles=false, loadFolders=false) {\n        const wanted = {}\n        wanted[this.name] = this.getConfig()\n        const items = await chrome.storage.sync.get(wanted);\n\n        this.setConfig(items[this.name]);\n        console.debug(`Loaded ${this.name} config: ${JSON.stringify(this.getConfig())}`);\n\n        if (loadProfiles) { this.profiles = await this.getProfiles(); }\n        if (loadFolders) { this.folders = await this.getFolders(); }\n\n        return items;\n    }\n\n    // Save config to the extension storage\n    async saveConfig() {\n        const wanted = {}\n        wanted[this.name] = this.getConfig()\n        console.debug(`Saved ${this.name} config: ${JSON.stringify(this.getConfig())}`);\n        await chrome.storage.sync.set(wanted);\n    }\n\n    // Build the server url\n    getUrl() {\n\t\tvar regex = new RegExp(\"https{0,1}:\\/\\/\");\n\n\t\tif (!regex.exec(this.host)) {\n\t\t\tthis.host = \"http://\" + this.host;\n\t\t}\n\t\tif (this.port === \"\") {\n\t\t\treturn this.host;\n\t\t} else {\n\t\t\treturn this.host + \":\" + this.port;\n\t\t}\n\t}\n\n    async get(endpoint, data=null, params=null) {\n        try {\n            // Build URL\n\t\t\tvar url = this.getUrl() + endpoint;\n            if (params) {\n\t\t\t    url = url + \"?\" + params;\n            }\n\n            // Build headers\n            const headers = {\"X-Api-Key\": this.apikey};\n\t\t\tif (this.user && this.password) {\n                headers[\"Authorization\"] = \"Basic \" + btoa(this.user + \":\" + this.password);\n            }\n\n            // Build data\n            var body = data;\n            if ((data != null) && (typeof data !== \"string\")) {\n                body = JSON.stringify(data);\n            }\n        \n            const res = await fetch(url, { method: \"get\", body: body, headers: headers });\n\n            if (res.status >= 400) throw new Error(`${res.status} (${res.statusText})`)\n            data = await res.json();\n            console.debug(`Request to ${url}: ${res.status} ${JSON.stringify(data)}`); \n\n            return data;\n        } catch (error) {\n            console.log(`Error querying endpoint ${url}: ${error}`);\n            throw error;\n        }\n    }\n\n    // post()\n\n    getLogo(size=\"48\") {\n        return `/img/${this.name}/${this.name}-${size}.png`;\n    }\n\n    // Check if an item exists based on its id and/or slyf, returns its slug or null\n    async itemExists(item) {\n        const response = await this.getItemList();\n        for (var i = 0; i < response.length; i++) {\n            const elt = response[i];\n            if ((item.itemid && this.checkItemId(item.itemid, elt)) || (item.itemslug && item.itemslug === elt.titleSlug)) {\n                return elt.titleSlug;\n            }\n        }\n        return null;\n    }\n\n    // Look for an item based on info provided (id and/or slug), fetch and fill other info (exists, properties)\n    async getItemInfo(item) {\n        // Query for both existence and item info\n        const [slug, results] = await Promise.all([this.itemExists(item), this.lookupItem(item)]);\n\n        // Consolidate results\n        item.itemslug = slug;\n        item.exists = (item.itemslug)?true:false;\n        if (results.length == 0) { item.properties = null; }\n        if (results.length > 0) {\n            item.properties = results[0];\n            if (results.length > 1) console.log(\"Warning, several results found for this item\");\n        }\n\n        return item\n    }\n\n    async getProfiles() {\n        const result = await this.get(this.getProfileUrlPath());\n        // for (let i = 0; i < result.length; i++) { console.log(\"prof: \" + result[i].id + \" // \" + result[i].name); }\n        return result;\n    }\n\n    async getFolders() {\n        const result = await this.get(this.getFolderUrlPath());\n        const folders = []\n        for (let i = 0; i < result.length; i++) { \n            // console.log(\"prof: \" + result[i].id + \" // \" + result[i].path);\n            folders.push({\"name\": result[i].path, \"id\": result[i].path})\n        }\n        return folders;\n    }\n\n    async getItemList() { return []; }\n    async lookupItem(item) { return {}; }\n    getAuxInfoValues() { return []; }\n    getItemUrl(item) { return this.getUrl() + \"/\" + item.itemslug }\n    checkItemId(itemid, element) { return False; }\n    getProfileUrlPath() { return \"/profiles\";}\n    getFolderUrlPath() { return \"/folders\";}\n}\n\nexport class Radarr extends Server {\n\tconstructor () {\n        super(\"radarr\", 7878)\n    }\n    \n    async getItemList() { return await this.get(\"/api/v3/movie\"); }\n    async lookupItem(item) { return await this.get(\"/api/v3/movie/lookup\", null, \"term=imdb%3A%20\" + item.itemid); }\n    checkItemId(itemid, element) {  return (itemid === element.imdbId); }\n    getItemUrl(item) { return this.getUrl() + \"/movies/\" + item.itemslug }\n    getProfileUrlPath() { return \"/api/v3/qualityProfile\";}\n    getFolderUrlPath() { return \"/api/v3/rootfolder\";}\n    getAuxInfoValues() {\n        return [\n            {name: \"Announced\", id: \"announced\"},\n            {name: \"In Cinemas\", id: \"inCinemas\"},\n            {name: \"Physical/Web\", id: \"released\"},\n            {name: \"Pre DB/Web\", id: \"preDB\"}\n          ];    \n    }\n}\n\nexport class Sonarr extends Server {\n\tconstructor () {\n        super(\"sonarr\", 8989)\n    }\n\n    async getItemList() { return await this.get(\"/api/v3/series\"); }\n    async lookupItem(item) { return await this.get(\"/api/v3/series/lookup\", null, \"term=tvdb%3A%20\" + item.itemid); }\n    checkItemId(itemid, element) { return ((element.tvdbId) && (itemid === element.tvdbId.toString())); }\n    getItemUrl(item) { return this.getUrl() + \"/series/\" + item.itemslug }\n    getProfileUrlPath() { return \"/api/v3/qualityProfile\";}\n    getFolderUrlPath() { return \"/api/v3/rootfolder\";}\n    getAuxInfoValues() {\n        return [{name: \"Standard\", id: \"standard\"}, {name: \"Daily\", id: \"daily\"}, {name: \"Anime\", id: \"anime\"}];\n    }\n}\n\n\n// addItem()\n    // tbd\n    // radarr.addMovie(\n    //     media.movie.text[0],\n    //     $('#lstProfile').val(),\n    //     $('#monitored').prop('checked'),\n    //     $('#lstMinAvail').val(),\n    //     false,\n    //     $('#lstFolderPath').val() ? $('#lstFolderPath').val() : addPath\n    // );\n    // sonarr.addSeries(\n    //     media.series.text[0],\n    //     $('#lstProfile').val(),\n    //     $('#lstSeriesType').val(),\n    //     $('#monitored').prop('checked'),\n    //     false,\n    //     $('#lstFolderPath').val() ? $('#lstFolderPath').val() : addPath,\n    //     $('#lstLanguage').val()\n    // );\n// \n// addMovie(movie, qualityId, monitored, minAvail, addSearch, folderPath) {\n//     pulsarr.loading();\n//     var newMovie = {\n//         \"title\": movie.title,\n//         \"year\": movie.year,\n//         \"qualityProfileId\": parseInt(qualityId),\n//         \"titleSlug\": movie.titleSlug,\n//         \"images\": movie.images,\n//         \"tmdbid\": movie.tmdbId,\n//         \"rootFolderPath\": folderPath,\n//         \"monitored\": monitored,\n//         \"minimumAvailability\": minAvail,\n//         \"addOptions\": {\n//             \"searchForMovie\": addSearch\n//         }\n//     };\n\n//     console.log(\"Add movie\");\n//     console.log(newMovie);\n\n//     this.post(\"/api/v3/movie\", newMovie).then(function(response) {\n//         radarr.updatePreferences(monitored, qualityId, minAvail, folderPath);\n//         pulsarr.info(\"Movie added to Radarr!\");\n//         setTimeout(function() {\n//             window.close();\n//         }, 1500);\n//     }).catch(function(error) {\n//         console.log(\"Error: \" + error)\n//         pulsarr.info(error);\n//     });\n// }\n// addSeries(series, qualityId, seriesType, monitored, addSearch, folderPath, languageId) {\n//     pulsarr.loading();\n\n//     var newSeries = {\n//         \"title\": series.title,\n//         \"year\": series.year,\n//         \"qualityProfileId\": parseInt(qualityId),\n//         \"languageProfileId\": languageId,\n//         \"seriesType\": seriesType,\n//         \"titleSlug\": series.titleSlug,\n//         \"images\": series.images,\n//         \"tvdbId\": series.tvdbId,\n//         \"rootFolderPath\": folderPath,\n//         \"monitored\": monitored,\n//         \"addOptions\": {\n//             \"ignoreEpisodesWithFiles\": false,\n//             \"ignoreEpisodesWithoutFiles\": false,\n//             \"searchForMissingEpisodes\": addSearch\n//         }\n//     };\n//     console.log(\"Adding serie\");\n//     console.log(newSeries);\n\n//     this.post(\"/api/v3/series\", newSeries).then(function(response) {\n//         sonarr.updatePreferences(monitored, qualityId, seriesType, folderPath);\n//         pulsarr.info(\"Series added to Sonarr!\");\n//         setTimeout(function() {\n//             window.close();\n//         }, 1500);\n//     }).catch(function(error) {\n//         pulsarr.info(error);\n//     });\n// }\n\n\n// lookupItemByTitleYear(title, year)\n    // async lookupMovieByTitleYear(title, year) {\n\t// \tvar self = this;\n\t// \tvar searchString = title + \" \" + year;\n\t// \tsearchString = encodeURI(searchString);\n\t// \t// antipattern: resolve acts as reject and vice versa\n\t// \treturn new Promise(async function(resolve, reject) {\n\t// \t\tif (title === \"\") {\n\t// \t\t\tresolve();\n\t// \t\t} else {\n\t// \t\t\tvar lookup = await self.get(\"/api/v3/movie/lookup\", \"term=\" + searchString)\n\t// \t\t\tvar existingSlug = await self.isExistingMovieByTitleSlug(lookup.text[0].titleSlug)\n\t// \t\t\tif (lookup) {\n\t// \t\t\t\treject({\"type\": \"movie\", \"movie\": lookup, \"existingSlug\": existingSlug});\n\t// \t\t\t} else {\n\t// \t\t\t\tresolve(error);\n\t// \t\t\t}\n\t// \t\t};\n\t// \t});\n\t// }\n\t// async lookupSeriesByTitleYear(title, year) {\n\t// \tvar self = this;\n\t// \tvar searchString = title + \" \" + year;\n\t// \tsearchString = encodeURI(searchString);\n\t// \t// antipattern: resolve acts as reject and vice versa\n\t// \treturn new Promise(async function(resolve, reject) {\n\t// \t\tif (title === \"\") {\n\t// \t\t\tresolve();\n\t// \t\t} else {\n\t// \t\t\tvar lookup = await self.get(\"/api/v3/series/lookup\", \"term=\" + searchString)\n\t// \t\t\tvar existingSlug = await self.isExistingSeriesByTitleSlug(lookup.text[0].titleSlug)\n\t// \t\t\tif (lookup) {\n\t// \t\t\t\treject({\"type\": \"series\", \"series\": lookup, \"existingSlug\": existingSlug});\n\t// \t\t\t} else {\n\t// \t\t\t\tresolve(error);\n\t// \t\t\t}\n\t// \t\t};\n\t// \t});\n\t// }\n\nconst ServerList = {};\nServerList[ItemTypes.Movie] = new Radarr();\nServerList[ItemTypes.Serie] = new Sonarr();\n\n// Find a provider matching this url\nexport function getServerForType(type) {\n    return ServerList[type];\n}\n","\"use strict\";"],"names":["$e1c11fc7383b8165$export$55be15701b71cf02","Unknown","Movie","Serie","$e1c11fc7383b8165$export$6d08773d2e66f8f2","constructor","itemid","itemtype","itemslug","exists","properties","provider","server","getPosterUrl","images","i","length","coverType","remoteUrl","$e1c11fc7383b8165$export$d59771a2e9612de9","name","default_port","setConfig","server_settings","configuration","auth","preferences","undefined","enabled","host","port","apikey","user","password","monitored","profileid","qualityProfileId","auxinfo","auxInfo","folder","profiles","folders","getConfig","loadConfig","loadProfiles","loadFolders","wanted","items","chrome","storage","sync","get","console","debug","JSON","stringify","getProfiles","getFolders","saveConfig","set","getUrl","regex","RegExp","exec","endpoint","data","params","url","headers","btoa","body","res","fetch","method","status","Error","statusText","json","error","log","getLogo","size","itemExists","item","response","getItemList","elt","checkItemId","titleSlug","getItemInfo","slug","results","Promise","all","lookupItem","getProfileUrlPath","result","getFolderUrlPath","push","path","getAuxInfoValues","getItemUrl","element","False","$e1c11fc7383b8165$var$ServerList","imdbId","id","tvdbId","toString","$d0175d9ba891ce1f$var$Provider","$d0175d9ba891ce1f$export$95ff3f2cef1aeda","urlMatch","itemFromUrl","idRegex","xmlparser","DOMParser","_imdbIdFromUrl","imdbid","slice","match","tvdbidFromImdbid","xmldata","text","xmldoc","parseFromString","querySelector","serieid","getElementsByTagName","innerHTML","tvdbid","$d0175d9ba891ce1f$var$ProviderList","$b61950db06f93f98$var$handlePageAction","tabInfo","tabs","query","active","currentWindow","tabArray","Object","entries","action","enable","tabId","disable","onActivated","addListener","webNavigation","onCommitted"],"version":3,"file":"background.js.map"}